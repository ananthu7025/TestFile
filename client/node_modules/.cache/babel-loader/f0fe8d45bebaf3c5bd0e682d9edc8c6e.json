{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ananthapadmanabhan G\\\\Desktop\\\\youtube-react-admin\\\\src\\\\pages\\\\Task\\\\TaskList.js\";\nimport React from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Task from \"./Task\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskList = ({\n  tasks,\n  setTasks,\n  handleRemoveTask,\n  handleCompleteTask\n}) => {\n  // a little function to help us with reordering the result\n  const reorderTasks = (tasks, startIndex, endIndex) => {\n    const result = [...tasks];\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const getItemStyle = (isDragging, draggableStyle) => ({\n    // change background colour if dragging\n    background: isDragging ? \"#eee\" : \"#fff\",\n    // styles we need to apply on draggables\n    ...draggableStyle\n  });\n\n  const onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorderTasks(tasks, result.source.index, result.destination.index);\n    setTasks(items);\n  };\n\n  return tasks && tasks.length > 0 ? /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"droppable\",\n      children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n        ref: provided.innerRef,\n        className: \"task-list-container\",\n        children: [tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: `${index}_${task.description}`,\n          index: index,\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task\",\n            ref: provided.innerRef,\n            ...provided.draggableProps,\n            ...provided.dragHandleProps,\n            style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n            children: /*#__PURE__*/_jsxDEV(Task, {\n              task: task,\n              index: index,\n              id: index,\n              handleRemoveTask: handleRemoveTask,\n              handleCompleteTask: handleCompleteTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }, this)\n        }, `${index}_${task.description}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this) : null;\n};\n\n_c = TaskList;\nexport default TaskList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"sources":["C:/Users/Ananthapadmanabhan G/Desktop/youtube-react-admin/src/pages/Task/TaskList.js"],"names":["React","DragDropContext","Droppable","Draggable","Task","TaskList","tasks","setTasks","handleRemoveTask","handleCompleteTask","reorderTasks","startIndex","endIndex","result","removed","splice","getItemStyle","isDragging","draggableStyle","background","onDragEnd","destination","items","source","index","length","provided","snapshot","droppableProps","innerRef","map","task","description","draggableProps","dragHandleProps","style","placeholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,KADgB;AAEhBC,EAAAA,QAFgB;AAGhBC,EAAAA,gBAHgB;AAIhBC,EAAAA;AAJgB,CAAD,KAKX;AACJ;AACA,QAAMC,YAAY,GAAG,CAACJ,KAAD,EAAQK,UAAR,EAAoBC,QAApB,KAAiC;AACpD,UAAMC,MAAM,GAAG,CAAC,GAAGP,KAAJ,CAAf;AACA,UAAM,CAACQ,OAAD,IAAYD,MAAM,CAACE,MAAP,CAAcJ,UAAd,EAA0B,CAA1B,CAAlB;AACAE,IAAAA,MAAM,CAACE,MAAP,CAAcH,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;AAEA,WAAOD,MAAP;AACD,GAND;;AAQA,QAAMG,YAAY,GAAG,CAACC,UAAD,EAAaC,cAAb,MAAiC;AACpD;AACAC,IAAAA,UAAU,EAAEF,UAAU,GAAG,MAAH,GAAY,MAFkB;AAGpD;AACA,OAAGC;AAJiD,GAAjC,CAArB;;AAOA,QAAME,SAAS,GAAGP,MAAM,IAAI;AAC1B;AACA,QAAI,CAACA,MAAM,CAACQ,WAAZ,EAAyB;AACvB;AACD;;AAED,UAAMC,KAAK,GAAGZ,YAAY,CACxBJ,KADwB,EAExBO,MAAM,CAACU,MAAP,CAAcC,KAFU,EAGxBX,MAAM,CAACQ,WAAP,CAAmBG,KAHK,CAA1B;AAMAjB,IAAAA,QAAQ,CAACe,KAAD,CAAR;AACD,GAbD;;AAeA,SAAOhB,KAAK,IAAIA,KAAK,CAACmB,MAAN,GAAe,CAAxB,gBACL,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEL,SAA5B;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,WAAW,EAAC,WAAvB;AAAA,gBACG,CAACM,QAAD,EAAWC,QAAX,kBACC,oBACMD,QAAQ,CAACE,cADf;AAEE,QAAA,GAAG,EAAEF,QAAQ,CAACG,QAFhB;AAGE,QAAA,SAAS,EAAC,qBAHZ;AAAA,mBAKGvB,KAAK,CAACwB,GAAN,CAAU,CAACC,IAAD,EAAOP,KAAP,kBACT,QAAC,SAAD;AAEE,UAAA,WAAW,EAAG,GAAEA,KAAM,IAAIO,IAAI,CAACC,WAAa,EAF9C;AAGE,UAAA,KAAK,EAAER,KAHT;AAAA,oBAKG,CAACE,QAAD,EAAWC,QAAX,kBACC;AACE,YAAA,SAAS,EAAC,MADZ;AAEE,YAAA,GAAG,EAAED,QAAQ,CAACG,QAFhB;AAAA,eAGMH,QAAQ,CAACO,cAHf;AAAA,eAIMP,QAAQ,CAACQ,eAJf;AAKE,YAAA,KAAK,EAAElB,YAAY,CACjBW,QAAQ,CAACV,UADQ,EAEjBS,QAAQ,CAACO,cAAT,CAAwBE,KAFP,CALrB;AAAA,mCAUE,QAAC,IAAD;AACE,cAAA,IAAI,EAAEJ,IADR;AAEE,cAAA,KAAK,EAAEP,KAFT;AAGE,cAAA,EAAE,EAAEA,KAHN;AAIE,cAAA,gBAAgB,EAAEhB,gBAJpB;AAKE,cAAA,kBAAkB,EAAEC;AALtB;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA;AANJ,WACQ,GAAEe,KAAM,IAAIO,IAAI,CAACC,WAAa,EADtC;AAAA;AAAA;AAAA;AAAA,gBADD,CALH,EAiCGN,QAAQ,CAACU,WAjCZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADK,GA0CH,IA1CJ;AA2CD,CAhFD;;KAAM/B,Q;AAkFN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Task from \"./Task\";\r\n\r\n\r\nconst TaskList = ({\r\n  tasks,\r\n  setTasks,\r\n  handleRemoveTask,\r\n  handleCompleteTask\r\n}) => {\r\n  // a little function to help us with reordering the result\r\n  const reorderTasks = (tasks, startIndex, endIndex) => {\r\n    const result = [...tasks];\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n  };\r\n\r\n  const getItemStyle = (isDragging, draggableStyle) => ({\r\n    // change background colour if dragging\r\n    background: isDragging ? \"#eee\" : \"#fff\",\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle\r\n  });\r\n\r\n  const onDragEnd = result => {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorderTasks(\r\n      tasks,\r\n      result.source.index,\r\n      result.destination.index\r\n    );\r\n\r\n    setTasks(items);\r\n  };\r\n\r\n  return tasks && tasks.length > 0 ? (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n          <div\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n            className=\"task-list-container\"\r\n          >\r\n            {tasks.map((task, index) => (\r\n              <Draggable\r\n                key={`${index}_${(task.description)}`}\r\n                draggableId={`${index}_${(task.description)}`}\r\n                index={index}\r\n              >\r\n                {(provided, snapshot) => (\r\n                  <div\r\n                    className=\"task\"\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    style={getItemStyle(\r\n                      snapshot.isDragging,\r\n                      provided.draggableProps.style\r\n                    )}\r\n                  >\r\n                    <Task\r\n                      task={task}\r\n                      index={index}\r\n                      id={index}\r\n                      handleRemoveTask={handleRemoveTask}\r\n                      handleCompleteTask={handleCompleteTask}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </Draggable>\r\n            ))}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  ) : null;\r\n};\r\n\r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}